# Generated by Django 4.2.2 on 2023-07-10 16:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phone_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('genre', models.CharField(choices=[('masculin', 'Masculin'), ('feminin', 'Feminin')], max_length=10, verbose_name='Genre')),
                ('telephone', phone_field.models.PhoneField(blank=True, max_length=31, verbose_name='Téléphone')),
                ('role', models.CharField(choices=[('administrateur', 'Administrateur'), ('organisateur', 'Organisateur'), ('agent_de_saisie', 'Agent de saisie'), ('receptioniste', 'Receptioniste')], max_length=20, verbose_name='Rôle')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, unique=True, verbose_name='Nom')),
            ],
        ),
        migrations.CreateModel(
            name='Cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, unique=True, verbose_name='Nom')),
            ],
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=20, verbose_name='Prénom')),
                ('genre', models.CharField(choices=[('masculin', 'Masculin'), ('feminin', 'Feminin')], max_length=10, verbose_name='Genre')),
                ('année_naissance', models.PositiveIntegerField(verbose_name='Année_naissance')),
            ],
        ),
        migrations.CreateModel(
            name='Exetat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edition', models.PositiveIntegerField(verbose_name='Edition')),
            ],
        ),
        migrations.CreateModel(
            name='Laureat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_centre', models.PositiveIntegerField(verbose_name='code_centre')),
                ('code_participation', models.PositiveIntegerField(verbose_name='code_participation')),
                ('code_ecole', models.PositiveIntegerField(verbose_name='code_école')),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, unique=True, verbose_name='Nom')),
            ],
        ),
        migrations.CreateModel(
            name='Rendez_vous',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=20, verbose_name='Prenom')),
                ('email', models.EmailField(max_length=100, verbose_name='Email')),
                ('gender', models.CharField(choices=[('masculin', 'Masculin'), ('feminin', 'Feminin')], max_length=10, verbose_name='Genre')),
                ('code_centre', models.PositiveIntegerField(verbose_name='Code_centre')),
                ('code_participation', models.PositiveIntegerField(verbose_name='Code_participation')),
                ('code_ecole', models.PositiveIntegerField(verbose_name='Code_école')),
                ('type_documents', models.CharField(choices=[('attestation de réussite', 'Attestation de réussite'), ('relèvé des points', 'Relèvé des points'), ('attestation de participation au concours National', 'Attestation de participation au concours National'), ('attestation de participation à l_examen d_etat', 'Attestation de participation à l_examen d_etat')], max_length=50, verbose_name='Type de document')),
                ('edition', models.PositiveIntegerField(verbose_name='Edition')),
                ('code', models.PositiveIntegerField(verbose_name='code_rdv')),
                ('date_demande', models.DateField(auto_now_add=True, verbose_name='Date de demande')),
                ('date_delivrance', models.DateField(blank=True, null=True, verbose_name='Date de delivrance')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, unique=True, verbose_name='Nom')),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=20, unique=True, verbose_name='Nom')),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.commune')),
            ],
        ),
        migrations.CreateModel(
            name='Section_cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cours', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.cours')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.section')),
            ],
        ),
        migrations.AddConstraint(
            model_name='rendez_vous',
            constraint=models.UniqueConstraint(fields=('nom', 'prenom', 'code_centre', 'code_participation', 'code_ecole', 'type_documents', 'edition'), name='unique.rendez_vous'),
        ),
        migrations.AddField(
            model_name='laureat',
            name='etudiant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.etudiant'),
        ),
        migrations.AddField(
            model_name='laureat',
            name='exetat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.exetat'),
        ),
        migrations.AddField(
            model_name='exetat',
            name='section_cours',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.section_cours'),
        ),
        migrations.AddField(
            model_name='etudiant',
            name='commune',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.commune'),
        ),
        migrations.AddField(
            model_name='commune',
            name='province',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.province'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.zone'),
        ),
        migrations.AddConstraint(
            model_name='laureat',
            constraint=models.UniqueConstraint(fields=('code_centre', 'code_participation', 'code_ecole', 'exetat'), name='unique.laureat'),
        ),
        migrations.AddConstraint(
            model_name='exetat',
            constraint=models.UniqueConstraint(fields=('edition',), name='unique.exetat'),
        ),
        migrations.AddConstraint(
            model_name='etudiant',
            constraint=models.UniqueConstraint(fields=('nom', 'prenom', 'genre', 'année_naissance'), name='unique_etudiant'),
        ),
    ]
